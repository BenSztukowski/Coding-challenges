//JavaScript coding solutions

//Square every digit of a number and concatenate them.
//Example: if we run 9119 through the function, 811181 will come out, because 92 is 81 and 12 is 1.

function squareDigits(num){
  let s = num.toString();
  let result = '';
  for (n of s){
    result+=Number(n)*Number(n);
  }
  return Number(result);
  
}


//implement a difference function, which subtracts one list from another and returns the result.
//Remove all values from list a, which are present in list b keeping their order.

function arrayDiff(a, b) {
  if(a.length!=0){
    for (char of b){
      a = a.filter(function(x) {
      return x !== char;
      })
    }
  }
  return a;
}

//count all the occurring characters in a string. If you have a string like aba, then the result should be {'a': 2, 'b': 1}

function count (string) {  
  let obby = {};
  for (char of string){
    if (char in obby){
      obby[char] = parseInt(obby[char]) + 1;
    } else {
      obby[char] = 1;
    }
  }
  return obby;
}


//Return all prime factorials of a number

function primeFactors(n){
  let result = "";
  for (let i = 2; i <= n; i++){
    let count = 0;
    while (n%i == 0) {
      console.log(`count: ${count}, n: ${n}, i: ${i}`);
      count++;
      n/=i;
    }
    if(count >= 1){
      result += "(";
      if (count > 1){
      result = result + i + "**" + count + ")";
      }else{
        result = result + i + ")";  
        }
    }
  }
  if(result == ""){
    result = "(" + n + ")";
  }
  return result;
}

//Return the top three frequently used words in a text, as an array, cutting out special characters

function topThreeWords(text) {
  text = text.toLowerCase();
  let count = {};
  const reg = new RegExp(/[A-z]/);
  let cleanedText= "";
  for (let i = 0; i < text.length; i++){
    if (reg.test(text[i]) || text[i]== " " || text[i] == "'"){
      cleanedText += text[i];
    }
    if (text[i]=== " " && text[i+1]=== " "){
      i++;
    }
  }
  console.log(cleanedText)
  let arr = cleanedText.split(" ");
  
  for (word of arr){
    if (word in count){
      count[word] += 1;
    } else {
      count[word] = 1;
    }
    console.log(count);
  }
  
  let arrSort = [];
  for (let k in count) {
    arrSort.push({
      name: k,
      value: count[k]
    });
  }

  let sorted = arrSort.sort(function(b, a) {
    return (a.value > b.value) ? 1 : ((b.value > a.value) ? -1 : 0)
  });
  console.log(sorted);
  let result = [];
  let howMany = 3;
  if (sorted.length<3){
    howMany = sorted.length;
  }
  for (let i = 0; i < howMany; i++){
    if (sorted[i].name && reg.test(sorted[i].name)){
      result.push(sorted[i].name);
    }
    if (sorted.length>3 && !reg.test(sorted[i].name)){
        howMany++;
    }
  }
  return result;
  
}

//Determine if one array is the same structure as another
Array.prototype.sameStructureAs = function (other) {
  if (isArray(this) && isArray(other)){
    if (this.length == other.length){
      for (let i = 0; i < this.length; i++){
        if (this[i].toString().length != other[i].toString().length){
            return false;
        }
        if ((isArray(this[i][0]) && !isArray(other[i][0])) || (!isArray(this[i][0]) && isArray(other[i][0]))){
            return false;
        }
     }
      return true;
    } else {
      return false;
    }
    return true;
  } else {
    return false;
  }
  // Return 'true' if and only if 'other' has the same
    // nesting structure as 'this'.

    // Note: You are given a function isArray(o) that returns
    // whether its argument is an array.
};
